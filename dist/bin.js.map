{"mappings":"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","sources":["lib/index.ts","lib/Generator.ts","lib/Disposition.ts","lib/Template.ts","lib/Module.ts","lib/utils.ts"],"sourcesContent":["import Generator from \"./Generator\";\n\nexport {\n    Generator,\n}\n\nexport default Generator;","import Disposition from \"./Disposition\";\nimport Template, { TemplateID } from \"./Template\";\nimport Module from \"./Module\";\n\nexport default class Generator {\n    protected readonly _disposition: Disposition;\n\n    constructor(generateOptions = {}) {\n        this._disposition = new Disposition(generateOptions);\n    }\n\n    public async scan(templateID: TemplateID, options = {}): Promise<Module | undefined> {\n        const template = new Template(this, this._disposition);\n        await template.graph(templateID, options);\n        return template.getGraph();\n    }\n}\n","import path from \"path\";\n\nexport interface Eligible {\n    id: string;\n    isEligible: boolean;\n    path: string;\n    isPreset: boolean;\n}\n\nexport default class Disposition {\n    constructor(private readonly generateOptions = {}) {\n    }\n\n    public scan() {\n        console.log('scan');\n    }\n\n    public getCurrentDisposition() {\n        console.log('getCurrentDisposition');\n    }\n\n    public eligible(id: string): Eligible {\n        return {\n            id,\n            isEligible: true,\n            path: path.resolve(__dirname, \"..\", 'visualizations'),\n            isPreset: false,\n        };\n    }\n}\n","import Generator from \"./Generator\";\nimport Disposition from \"./Disposition\";\nimport Module from \"./Module\";\n\nexport type TemplateID = string;\n\nexport interface TemplateOptions {}\n\nexport default class Template {\n  private _module: Module | undefined;\n\n  constructor(\n    private readonly ctx: Generator,\n    private readonly disposition: Disposition\n  ) {}\n\n  public async graph(id: TemplateID, options: TemplateOptions) {\n    const eligible = this.disposition.eligible(id);\n    if (eligible.isEligible) {\n      const rootModule = new Module(this.ctx, this.disposition);\n      await rootModule.prepare(`${eligible.path}/${eligible.id}`);\n      this._module = rootModule;\n    }\n  }\n\n  public getGraph() {\n    return this._module;\n  }\n}\n","import Generator from \"./Generator\";\nimport Disposition from \"./Disposition\";\nimport { getDirectoryFiles, isDirectory } from \"./utils\";\nimport path from \"path\";\n\nexport default class Module {\n  public value: Record<string | number | symbol, any> = {};\n\n  /**\n   * 子模块\n   */\n  public children: Set<Module> = new Set<Module>();\n\n  /**\n   * 当前路径\n   */\n  public path: string = '';\n\n  /**\n   * 是否模块：任何的文件都属于模块\n   */\n  public istExist: boolean = false;\n\n  /**\n   * 目录类型\n   */\n  public isDirectory: boolean = false;\n\n  constructor(\n    protected readonly ctx: Generator,\n    protected readonly disposition: Disposition,\n  ) {}\n\n  async prepare(modulePath: string) {\n    this.path = modulePath;\n\n    /**\n     * 在调用Module的之前已经检查过路径存在性\n     * 只需要检查是否为目录即可\n     */\n    const result = await isDirectory(modulePath);\n\n    this.isDirectory = result.isDir;\n    this.istExist = result.isModule;\n\n    if (!result.isModule) {\n      return;\n    }\n\n    if (result.isDir) {\n      await this.correlation(modulePath);\n      return;\n    }\n\n    this.value = {};\n  }\n\n  public async correlation(modulePath: string) {\n    const files = await getDirectoryFiles(modulePath) as string[];\n    for (const moduleFileName of files) {\n        const submodulePath = path.join(modulePath, moduleFileName);\n        const submodule = new Module(this.ctx, this.disposition);\n        await submodule.prepare(submodulePath);\n        this.children.add(submodule);\n    }\n  }\n}\n","import fs from \"fs\";\n\nexport function accessiblePath(modulePath: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    fs.access(modulePath, fs.constants.F_OK, (err: any) => {\n      if (err) {\n        return reject(false);\n      }\n      resolve(true);\n    });\n  });\n}\n\nexport function isDirectory(\n  path: string\n): Promise<{ isModule: boolean; isDir: boolean }> {\n  return accessiblePath(path).then((isModule) => {\n    const isDir = fs.statSync(path).isDirectory();\n    return Promise.resolve({\n      isModule,\n      isDir,\n    });\n  });\n}\n\nexport function getDirectoryFiles(dirPath: string) {\n  return new Promise((resolve, reject) => {\n    return fs.readdir(dirPath, (err, files) => {\n      if (err) {\n        return reject([]);\n      }\n      resolve(files);\n    });\n  });\n}\n"],"names":[],"version":3,"file":"bin.js.map","sourceRoot":"../"}