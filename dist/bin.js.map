{"mappings":";;;;;;;;;;;;;;;;;;;;AESe;IACkB;IAA7B,YAA6B,kBAAkB,CAAC,CAAC,CAAE;+BAAtB;IAC7B;IAEO,OAAO;QACV,QAAQ,IAAI;IAChB;IAEO,wBAAwB;QAC3B,QAAQ,IAAI;IAChB;IAEO,SAAS,EAAU,EAAY;QAClC,OAAO;gBACH;YACA,YAAY;YACZ,MAAM,CAAA,GAAA,qCAAG,EAAE,QAAQ,yCAAW,MAAM;YACpC,UAAU;QACd;IACJ;AACJ;;;;AG3BO,SAAS,0CAAe,UAAkB;IAC/C,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,CAAA,GAAA,mCAAC,EAAE,OAAO,YAAY,CAAA,GAAA,mCAAC,EAAE,UAAU,MAAM,CAAC;YACxC,IAAI,KACF,OAAO,OAAO;YAEhB,QAAQ;QACV;IACF;AACF;AAEO,SAAS,0CACd,IAAY;IAEZ,OAAO,0CAAe,MAAM,KAAK,CAAC;QAChC,MAAM,QAAQ,CAAA,GAAA,mCAAC,EAAE,SAAS,MAAM;QAChC,OAAO,QAAQ,QAAQ;sBACrB;mBACA;QACF;IACF;AACF;AAEO,SAAS,0CAAkB,OAAe;IAC/C,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,OAAO,CAAA,GAAA,mCAAC,EAAE,QAAQ,SAAS,CAAC,KAAK;YAC/B,IAAI,KACF,OAAO,OAAO;YAEhB,QAAQ;QACV;IACF;AACF;;;;AD7Be;IAKQ;IACA;IACA;IACH;IAPX,MAA0B;IAC1B,SAA0C;IAEjD,YACqB,YACA,KACA,aACH,OAChB;0BAJmB;mBACA;2BACA;sBACH;aANX,WAAwB,IAAI;QAQjC,IAAI,CAAC,QAAQ;IACf;IAEA,MAAM,QAAQ,UAAkB,EAAE;QAChC;;;KAGC,GACD,MAAM,SAAS,MAAM,CAAA,GAAA,yCAAU,EAAE;QACjC,IAAI,CAAC,OAAO,UACV;QAGF,IAAI,OAAO,OAAO;YAChB,IAAI,CAAC,YAAY;YACjB;QACF;QAEA,IAAI,CAAC,QAAQ,IAAI,CAAC;IACpB;IAEO,YAAY,UAAkB,EAAE;QACrC,aAAa;QACb,MAAM,QAAQ,IAAI,IAAI,IAAI,CAAC;QAC3B,CAAA,GAAA,yCAAgB,EAAE,YAAY,KAAK,CAAC;YACjC,MAAmB,QAAQ,CAAC;gBAC3B,MAAM,IAAI,IAAI,yCAAO,CAAA,GAAA,qCAAG,EAAE,KAAK,YAAY,iBAAiB,IAAI,CAAC,KAAK,IAAI,CAAC,aAAa;gBACxF,IAAG,OACD,MAAM,SAAS,IAAI;YAEvB;QACF;IACF;AACF;;;ADxCe;IAIM;IACA;IAJX,QAA4B;IAEpC,YACmB,KACA,YACjB;mBAFiB;2BACA;IAChB;IAEI,MAAM,EAAc,EAAE,OAAwB,EAAE;QACrD,MAAM,WAAW,IAAI,CAAC,YAAY,SAAS;QAC3C,IAAI,SAAS,YACX,IAAI,CAAC,UAAU,IAAI,CAAA,GAAA,wCAAK,EAAE,CAAC,EAAE,SAAS,KAAK,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC;IAEhF;IAEO,WAAW;QAChB,OAAO,IAAI,CAAC;IACd;AACF;;;AFvBe;IACQ,aAA0B;IAE7C,YAAY,kBAAkB,CAAC,CAAC,CAAE;QAC9B,IAAI,CAAC,eAAe,IAAI,CAAA,GAAA,wCAAU,EAAE;IACxC;IAEO,KAAK,UAAsB,EAAE,UAAU,CAAC,CAAC,EAAY;QACxD,MAAM,WAAW,IAAI,CAAA,GAAA,wCAAO,EAAE,IAAI,EAAE,IAAI,CAAC;QACzC,SAAS,MAAM,YAAY;QAC3B,OAAO;IACX;AACJ;;;IDTA,2CAAe,CAAA,GAAA,wCAAQ","sources":["lib/index.ts","lib/Generator.ts","lib/Disposition.ts","lib/Template.ts","lib/Module.ts","lib/utils.ts"],"sourcesContent":["import Generator from \"./Generator\";\n\nexport {\n    Generator,\n}\n\nexport default Generator;","import Disposition from \"./Disposition\";\nimport Template, { TemplateID } from \"./Template\";\n\nexport default class Generator {\n    protected readonly _disposition: Disposition;\n\n    constructor(generateOptions = {}) {\n        this._disposition = new Disposition(generateOptions);\n    }\n\n    public scan(templateID: TemplateID, options = {}): Template {\n        const template = new Template(this, this._disposition);\n        template.graph(templateID, options);\n        return template\n    }\n}\n","import path from \"path\";\n\nexport interface Eligible {\n    id: string;\n    isEligible: boolean;\n    path: string;\n    isPreset: boolean;\n}\n\nexport default class Disposition {\n    constructor(private readonly generateOptions = {}) {\n    }\n\n    public scan() {\n        console.log('scan');\n    }\n\n    public getCurrentDisposition() {\n        console.log('getCurrentDisposition');\n    }\n\n    public eligible(id: string): Eligible {\n        return {\n            id,\n            isEligible: true,\n            path: path.resolve(__dirname, \"..\", 'visualizations'),\n            isPreset: false,\n        };\n    }\n}\n","import Generator from \"./Generator\";\nimport Disposition from \"./Disposition\";\nimport Module from \"./Module\";\n\nexport type TemplateID = string;\n\nexport interface TemplateOptions {}\n\nexport default class Template {\n  private _module: Module | undefined;\n\n  constructor(\n    private readonly ctx: Generator,\n    private readonly disposition: Disposition\n  ) {}\n\n  public graph(id: TemplateID, options: TemplateOptions) {\n    const eligible = this.disposition.eligible(id);\n    if (eligible.isEligible) {\n      this._module = new Module(`${eligible.path}/${eligible.id}`, this.ctx, this.disposition);\n    }\n  }\n\n  public getGraph() {\n    return this._module;\n  }\n}\n","import Generator from \"./Generator\";\nimport Disposition, { Eligible } from \"./Disposition\";\nimport { getDirectoryFiles, isDirectory } from \"./utils\";\nimport path from \"path\";\n\nexport default class Module {\n  public value: Module | undefined;\n  public children: Set<Module> = new Set<Module>();\n\n  constructor(\n    protected readonly modulePath: Eligible[\"path\"],\n    protected readonly ctx: Generator,\n    protected readonly disposition: Disposition,\n    public readonly parent: Module | undefined = undefined\n  ) {\n    this.prepare(modulePath);\n  }\n\n  async prepare(modulePath: string) {\n    /**\n     * 在调用Module的之前已经检查过路径存在性\n     * 只需要检查是否为目录即可\n     */\n    const result = await isDirectory(modulePath);\n    if (!result.isModule) {\n      return;\n    }\n\n    if (result.isDir) {\n      this.correlation(modulePath);\n      return;\n    }\n\n    this.value = this.parent;\n  }\n\n  public correlation(modulePath: string) {\n    // @ts-ignore\n    const _this = this || this.parent;\n    getDirectoryFiles(modulePath).then((files) => {\n      (files as string[]).forEach((moduleFileName) => {\n        const m = new Module(path.join(modulePath, moduleFileName), this.ctx, this.disposition, _this);\n        if(_this) {\n          _this.children.add(m);\n        }\n      });\n    });\n  }\n}\n","import fs from \"fs\";\n\nexport function accessiblePath(modulePath: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    fs.access(modulePath, fs.constants.F_OK, (err: any) => {\n      if (err) {\n        return reject(false);\n      }\n      resolve(true);\n    });\n  });\n}\n\nexport function isDirectory(\n  path: string\n): Promise<{ isModule: boolean; isDir: boolean }> {\n  return accessiblePath(path).then((isModule) => {\n    const isDir = fs.statSync(path).isDirectory();\n    return Promise.resolve({\n      isModule,\n      isDir,\n    });\n  });\n}\n\nexport function getDirectoryFiles(dirPath: string) {\n  return new Promise((resolve, reject) => {\n    return fs.readdir(dirPath, (err, files) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(files);\n    });\n  });\n}\n"],"names":[],"version":3,"file":"bin.js.map","sourceRoot":"../"}